{"version":3,"file":"static/js/691.fa84652c.chunk.js","mappings":"oQAGaA,EAAaC,EAAAA,GAAAA,KAAH,gZAcVC,EAAeD,EAAAA,GAAAA,OAAH,wTAgBZE,EAAcF,EAAAA,GAAAA,MAAH,uRAeXG,GAAYH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,oO,qEC2CtB,EAnFe,WACX,OAA0BK,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA4BF,EAAAA,EAAAA,UAAS,IAArC,eAAOG,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BP,EAAAA,EAAAA,WAAS,GAAvC,eAAOQ,EAAP,KAAgBC,EAAhB,KAEMC,EAAeJ,EAAaK,IAAI,SAChCC,GAAWC,EAAAA,EAAAA,OAEjBC,EAAAA,EAAAA,YAAU,WACV,GAAKJ,EAAL,CAII,IAAMK,EAAS,mCAAG,6GAESC,EAAAA,GAAAA,iBAAqBN,GAF9B,OAGVP,GADIA,EAFM,QAGMc,KAAI,SAAAC,GAChB,MAAe,CACXC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MAEpB,IACDhB,EAAUD,GATA,gDAWVkB,QAAQC,IAAR,MACAb,GAAW,GAZD,yDAAH,qDAgBfM,GAlBH,CAmBA,GAAE,CAACL,IAiBJ,OACI,gCACI,UAAChB,EAAD,CAAY6B,SAbC,SAAAC,GACjBA,EAAMC,iBAENlB,EAAgB,CAAEN,MAAAA,IACG,KAAjBA,EAAMyB,OAIVF,EAAMG,OAAOC,QAHTC,EAAAA,GAAAA,MAAY,wCAInB,EAIO,WACI,SAACjC,EAAD,CAAckC,KAAK,SAAnB,UACI,SAAC,MAAD,CAAUC,KAAM,QAGpB,SAAClC,EAAD,CACIiC,KAAK,OACLE,KAAK,QACLC,aAAa,MACbC,WAAS,EACTC,MAAOlC,EACPmC,SA5BK,SAAC,GAA2B,IAAfD,EAAc,EAAxBR,OAAUQ,MAC9BjC,EAASiC,EAAMT,OAClB,EA2BeW,YAAY,qBAIA,KAAb,OAANlC,QAAM,IAANA,OAAA,EAAAA,EAAQmC,UACL,+BACKnC,QADL,IACKA,OADL,EACKA,EAAQc,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACT,yBACI,SAACtB,EAAD,CAAWyC,MAAO,CAACC,KAAM5B,GAAW6B,GAAE,UAAKtB,GAA3C,SACKC,KAFAD,EADA,MAUpBX,GAAWqB,EAAAA,GAAAA,MAAY,oBAGnC,C,wDCvFKa,E,QAAYC,EAAAA,OAAa,CAC3BC,QAAS,iCAGPC,EAAU,mCAIHC,EAAmB,mCAAG,oGACRJ,EAAU/B,IAAI,uBAAwB,CACzDoC,OAAQ,CACJC,QAASH,KAHc,cACzBI,EADyB,yBAOxBA,EAASC,KAAKC,SAPU,2CAAH,qDAWnBC,EAAgB,mCAAG,WAAO1C,GAAP,uFACLgC,EAAU/B,IAAI,iBAAkB,CACnDoC,OAAQ,CACJC,QAASH,EACT5C,MAAOS,KAJa,cACtBuC,EADsB,yBAQrBA,EAASC,KAAKC,SARO,2CAAH,sDAYhBE,EAAc,mCAAG,WAAOlC,GAAP,uFACHuB,EAAU/B,IAAV,iBAAwBQ,EAAxB,KAA+B,CAClD4B,OAAQ,CACJC,QAASH,KAHS,cACpBI,EADoB,yBAOnBA,EAASC,MAPU,2CAAH,sDAWdI,EAAc,mCAAG,WAAOnC,GAAP,uFACHuB,EAAU/B,IAAV,iBAAwBQ,EAAxB,aAAuC,CAC1D4B,OAAQ,CACJC,QAASH,KAHS,cACpBI,EADoB,yBAOnBA,EAASC,KAAKK,MAPK,2CAAH,sDAWdC,EAAiB,mCAAG,WAAOrC,GAAP,uFACNuB,EAAU/B,IAAV,iBAAwBQ,EAAxB,aAAuC,CAC1D4B,OAAQ,CACJC,QAASH,KAHY,cACvBI,EADuB,yBAOtBA,EAASC,KAAKC,SAPQ,2CAAH,sDAUxBnC,EAAM,CACR8B,oBAAAA,EACAM,iBAAAA,EACAC,eAAAA,EACAC,eAAAA,EACAE,kBAAAA,GAGJ,M","sources":["pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from \"react-router-dom\";\n\nexport const SearchForm = styled.form`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    max-width: 600px;\n    margin-left: auto;\n    margin-right: auto;\n    background-color: white;\n    border-radius: normal;\n    overflow: hidden;\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchButton = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 6;\n    height: 6;\n    border: 0;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n    &:hover {\n        opacity: 1;\n    }\n`;\n\nexport const SearchInput = styled.input`\n    display: inline-block;\n    width: 100%;\n    font: inherit;\n    font-size: 20px;\n    border: none;\n    outline: none;\n    padding-left: 1px;\n    padding-right: 1px;\n    &::placeholder {\n        font: inherit;\n        font-size: 20px;\n    }\n`;\n\nexport const MovieLink = styled(Link)`\n    text-decoration: none;\n    font-family: Segoe UI;\n    margin-left: 8px;\n    color: black;\n    &:hover,\n    &:focus {\n        color: #ea332c;\n        text-decoration: underline #ea332c;\n    }\n`;","import { SearchForm, SearchButton, SearchInput, MovieLink} from \"./Movies.styled\";\nimport { useState, useEffect } from 'react';\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { FaSearch } from 'react-icons/fa';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport api from 'services/api';\n\nconst Movies = () => {\n    const [query, setQuery] = useState('');\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [isError, setIsError] = useState(false);\n\n    const searchQuery  = searchParams.get('query');\n    const location = useLocation();\n\n    useEffect(() => {\n    if (!searchQuery ) {\n      return;\n    }\n\n        const getMovies = async () => {\n            try {\n                let movies = await api.fetchMovieSearch(searchQuery );\n                movies = movies.map(movie => {\n                    return movie = {\n                        id: movie.id,\n                        title: movie.title,\n                    }\n                });\n                setMovies(movies);\n            } catch (error) {\n                console.log(error);\n                setIsError(true);\n            }\n        }\n\n        getMovies();\n    }, [searchQuery])\n\n    const handleChange = ({ target: { value } }) => {\n        setQuery(value.trim());\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        setSearchParams({ query });\n        if (query.trim() === '') {\n            toast.error(\"Enter a keyword to search for a movie\");\n            return;\n        }\n        event.target.reset();\n    };\n\n    return (\n        <section>\n            <SearchForm onSubmit={handleSubmit}>\n                <SearchButton type=\"submit\">\n                    <FaSearch size={32}/>\n                </SearchButton>\n\n                <SearchInput\n                    type=\"text\"\n                    name=\"query\"\n                    autocomplete=\"off\"\n                    autoFocus\n                    value={query}\n                    onChange={handleChange}\n                    placeholder=\"Search movies\"\n                />\n            </SearchForm>\n\n            {movies?.length !== 0 &&\n                <ul>\n                    {movies?.map(({ id, title}) => (\n                        <li key={id}>\n                            <MovieLink state={{from: location}} to={`${id}`}>\n                                {title}\n                            </MovieLink>\n                        </li>\n                    ))}\n                </ul>\n            }\n            \n            {isError && toast.error(\"We have error!\")}\n        </section>\n    )\n}\n\nexport default Movies;","import axios from 'axios';\n\nconst moviesAPI = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nconst API_KEY = '19de3f69b689775c27a0f6800fa7a97e';\n\n\n// movies trending  список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const fetchMoviesTrending = async () => {\n    const response = await moviesAPI.get('/trending/movie/day?', {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\n// movie search пошук фільму за ключовим словом на сторінці фільмів.\nexport const fetchMovieSearch = async (searchQuery) => {\n    const response = await moviesAPI.get('/search/movie?', {\n        params: {\n            api_key: API_KEY,\n            query: searchQuery,\n        },\n    });\n\n    return response.data.results;\n}\n\n// movie info запит повної інформації про фільм для сторінки кінофільму.\nexport const fetchMovieInfo = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data;\n}\n\n//  Movie Cast запит інформації про акторський склад для сторінки кінофільму.\nexport const fetchMovieCast = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/credits?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.cast;\n}\n\n// Movie Reviews запит оглядів для сторінки кінофільму.\nexport const fetchMovieReviews = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/reviews?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\nconst api = {\n    fetchMoviesTrending,\n    fetchMovieSearch,\n    fetchMovieInfo,\n    fetchMovieCast,\n    fetchMovieReviews,\n}\n\nexport default api;"],"names":["SearchForm","styled","SearchButton","SearchInput","MovieLink","Link","useState","query","setQuery","movies","setMovies","useSearchParams","searchParams","setSearchParams","isError","setIsError","searchQuery","get","location","useLocation","useEffect","getMovies","api","map","movie","id","title","console","log","onSubmit","event","preventDefault","trim","target","reset","toast","type","size","name","autocomplete","autoFocus","value","onChange","placeholder","length","state","from","to","moviesAPI","axios","baseURL","API_KEY","fetchMoviesTrending","params","api_key","response","data","results","fetchMovieSearch","fetchMovieInfo","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}