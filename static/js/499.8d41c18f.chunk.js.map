{"version":3,"file":"static/js/499.8d41c18f.chunk.js","mappings":"4NAEaA,EAAOC,EAAAA,GAAAA,GAAH,gFAMJC,EAAOD,EAAAA,GAAAA,GAAH,8JAQJE,EAASF,EAAAA,GAAAA,GAAH,yEAKNG,EAAUH,EAAAA,GAAAA,EAAH,iDAIPI,EAAeJ,EAAAA,GAAAA,EAAH,iD,oCCMzB,EAzBgB,WACZ,OAA8BK,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAMR,OAJAE,EAAAA,EAAAA,YAAU,WACNC,EAAAA,GAAAA,kBAAsBH,GAASI,KAAKL,GAAYM,MAAMC,QAAQC,MACjE,GAAE,CAACP,KAGA,gCACyB,KAAb,OAAPF,QAAO,IAAPA,OAAA,EAAAA,EAASU,UAAgB,SAACZ,EAAD,wDACzBE,IACG,SAACP,EAAD,UACKO,EAAQW,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACT,UAACnB,EAAD,YACI,UAACC,EAAD,sBAAiBiB,MACjB,SAAC,EAAD,UAAUC,MAFHF,EADF,QAUhC,C,qDC3BKG,E,OAAYC,EAAAA,OAAa,CAC3BC,QAAS,iCAGPC,EAAU,mCAIHC,EAAmB,mCAAG,oGACRJ,EAAUK,IAAI,uBAAwB,CACzDC,OAAQ,CACJC,QAASJ,KAHc,cACzBK,EADyB,yBAOxBA,EAASC,KAAKC,SAPU,2CAAH,qDAWnBC,EAAgB,mCAAG,WAAOC,GAAP,uFACLZ,EAAUK,IAAI,iBAAkB,CACnDC,OAAQ,CACJC,QAASJ,EACTU,MAAOD,KAJa,cACtBJ,EADsB,yBAQrBA,EAASC,KAAKC,SARO,2CAAH,sDAYhBI,EAAc,mCAAG,WAAOjB,GAAP,uFACHG,EAAUK,IAAV,iBAAwBR,EAAxB,KAA+B,CAClDS,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAASC,MAPU,2CAAH,sDAWdM,EAAc,mCAAG,WAAOlB,GAAP,uFACHG,EAAUK,IAAV,iBAAwBR,EAAxB,aAAuC,CAC1DS,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAASC,KAAKO,MAPK,2CAAH,sDAWdC,EAAiB,mCAAG,WAAOpB,GAAP,uFACNG,EAAUK,IAAV,iBAAwBR,EAAxB,aAAuC,CAC1DS,OAAQ,CACJC,QAASJ,KAHY,cACvBK,EADuB,yBAOtBA,EAASC,KAAKC,SAPQ,2CAAH,sDAUxBpB,EAAM,CACRc,oBAAAA,EACAO,iBAAAA,EACAG,eAAAA,EACAC,eAAAA,EACAE,kBAAAA,GAGJ,M","sources":["pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    &:not(:last-child) {\n        padding-bottom: 8px;\n        margin-bottom: 16px;\n        border-bottom: 1px solid black;\n    }\n`;\n\nexport const Author = styled.h4`\n    margin-left: 24px;\n    margin-bottom: 8px;\n`;\n\nexport const Сontent = styled.p`\n    margin-bottom: 8px;\n`;\n\nexport const NotFoundText = styled.p`\n    text-align: center;\n`;","import { NotFoundText, List, Item, Author, Сontent} from './Reviews.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport api from '../../services/api';\n\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState(null);\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        api.fetchMovieReviews(movieId).then(setReviews).catch(console.error);\n    }, [movieId])\n    \n    return (\n        <>\n            {reviews?.length === 0 && <NotFoundText>We don't have any reviews for this movie.</NotFoundText>}\n            {reviews &&\n                <List>\n                    {reviews.map(({ id, author, content }) => (\n                        <Item key={id}>\n                            <Author>Author: {author}</Author>\n                            <Сontent>{content}</Сontent>\n                        </Item>\n                    ))}\n                </List>\n            }\n        </>\n    )\n}\n\nexport default Reviews;","import axios from 'axios';\n\nconst moviesAPI = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nconst API_KEY = '19de3f69b689775c27a0f6800fa7a97e';\n\n\n// movies trending  список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const fetchMoviesTrending = async () => {\n    const response = await moviesAPI.get('/trending/movie/day?', {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\n// movie search пошук фільму за ключовим словом на сторінці фільмів.\nexport const fetchMovieSearch = async (searchQuery) => {\n    const response = await moviesAPI.get('/search/movie?', {\n        params: {\n            api_key: API_KEY,\n            query: searchQuery,\n        },\n    });\n\n    return response.data.results;\n}\n\n// movie info запит повної інформації про фільм для сторінки кінофільму.\nexport const fetchMovieInfo = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data;\n}\n\n//  Movie Cast запит інформації про акторський склад для сторінки кінофільму.\nexport const fetchMovieCast = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/credits?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.cast;\n}\n\n// Movie Reviews запит оглядів для сторінки кінофільму.\nexport const fetchMovieReviews = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/reviews?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\nconst api = {\n    fetchMoviesTrending,\n    fetchMovieSearch,\n    fetchMovieInfo,\n    fetchMovieCast,\n    fetchMovieReviews,\n}\n\nexport default api;"],"names":["List","styled","Item","Author","Сontent","NotFoundText","useState","reviews","setReviews","movieId","useParams","useEffect","api","then","catch","console","error","length","map","id","author","content","moviesAPI","axios","baseURL","API_KEY","fetchMoviesTrending","get","params","api_key","response","data","results","fetchMovieSearch","searchQuery","query","fetchMovieInfo","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}