{"version":3,"file":"static/js/691.567a4ab5.chunk.js","mappings":"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","sources":["components/MovieList/MovieList.styled.jsx","components/MovieList/MovieList.jsx","pages/Movies/Movies.styled.jsx","pages/Movies/Movies.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from \"react-router-dom\";\n\nexport const TrendMovieLink = styled(Link)`\n    text-decoration: none;\n    font-family: Segoe UI;\n    margin-left: 15;\n    color: black;\n    &:hover,\n    &:focus {\n        color: orangered;\n        text-decoration: underline;\n    }\n`;","import { TrendMovieLink } from \"./MovieList.styled\";\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ movies }) => {\n    const location = useLocation();\n\n    return (\n        <div>\n            <ul>\n                {movies.map(({ id, title, name }) => {\n                    return (\n                        <li key={id}>\n                            <TrendMovieLink to={`/movies/${id}`} state={{ from: location }}>\n                                {title || name}\n                            </TrendMovieLink>\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string,\n            name:PropTypes.string\n        })\n    ),\n};","import styled from 'styled-components';\nimport { Link } from \"react-router-dom\";\n\nexport const SearchForm = styled.form`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    max-width: 600px;\n    margin-left: auto;\n    margin-right: auto;\n    background-color: white;\n    border-radius: normal;\n    overflow: hidden;\n    box-shadow: 0px 2px 4px -1px rgba(0, 0, 0, 0.2), 0px 4px 5px 0px rgba(0, 0, 0, 0.14), 0px 1px 10px 0px rgba(0, 0, 0, 0.12);\n`;\n\nexport const SearchButton = styled.button`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 6;\n    height: 6;\n    border: 0;\n    opacity: 0.6;\n    transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n    cursor: pointer;\n    outline: none;\n    &:hover {\n        opacity: 1;\n    }\n`;\n\nexport const SearchInput = styled.input`\n    display: inline-block;\n    width: 100%;\n    font: inherit;\n    font-size: 20px;\n    border: none;\n    outline: none;\n    padding-left: 1px;\n    padding-right: 1px;\n    &::placeholder {\n        font: inherit;\n        font-size: 20px;\n    }\n`;\n\nexport const MovieLink = styled(Link)`\n    text-decoration: none;\n    font-family: Segoe UI;\n    margin-left: 8px;\n    color: black;\n    &:hover,\n    &:focus {\n        color: #ea332c;\n        text-decoration: underline #ea332c;\n    }\n`;","import { SearchForm, SearchButton, SearchInput} from \"./Movies.styled\";\nimport { useState, useEffect } from 'react';\nimport { useSearchParams} from 'react-router-dom';\nimport { Loader } from \"../../components/Loader/Loader\";\nimport MovieList from 'components/MovieList/MovieList';\n\nimport { FaSearch } from 'react-icons/fa';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport api from 'services/api';\n\nconst Movies = () => {\n    const [query, setQuery] = useState('');\n    const [movies, setMovies] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [isError, setIsError] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    const searchQuery  = searchParams.get('query');\n\n    useEffect(() => {\n    if (!searchQuery ) {\n      return;\n    }\n            const getMovies = async () => {\n                setIsLoading(true);\n\n            try {\n                const data = await api.fetchMovieSearch(searchQuery);\n                setMovies(data);\n            } catch (error) {\n                setIsError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        getMovies();\n    }, [searchQuery]);\n\n\n    const handleChange = ({ target: { value } }) => {\n        setQuery(value.trim());\n    };\n\n    const handleSubmit = event => {\n        event.preventDefault();\n\n        if (query.trim() === '') {\n            toast.warn(\"Enter a keyword to search for a movie\", {\n                autoClose: 3000,\n            });\n            return;\n        }\n        setSearchParams({ query });\n        event.target.reset();\n    };\n\n    return (\n        <section>\n            <SearchForm onSubmit={handleSubmit}>\n                <SearchButton type=\"submit\">\n                    <FaSearch size={32}/>\n                </SearchButton>\n\n                <SearchInput\n                    type=\"text\"\n                    name=\"query\"\n                    autocomplete=\"off\"\n                    autoFocus\n                    value={query}\n                    onChange={handleChange}\n                    placeholder=\"Search movies\"\n                />\n            </SearchForm>\n\n            {isLoading && <Loader />}\n            {isError && toast.error(\"We have error!\")}\n            {movies && <MovieList movies={movies} />}\n        </section>\n    )\n}\n\nexport default Movies;","import axios from 'axios';\n\nconst moviesAPI = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nconst API_KEY = '19de3f69b689775c27a0f6800fa7a97e';\n\n\n// movies trending  список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const fetchMoviesTrending = async () => {\n    const response = await moviesAPI.get('/trending/movie/day?', {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\n// movie search пошук фільму за ключовим словом на сторінці фільмів.\nexport const fetchMovieSearch = async (searchQuery) => {\n    const response = await moviesAPI.get('/search/movie?', {\n        params: {\n            api_key: API_KEY,\n            query: searchQuery,\n        },\n    });\n\n    return response.data.results;\n}\n\n// movie info запит повної інформації про фільм для сторінки кінофільму.\nexport const fetchMovieInfo = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data;\n}\n\n//  Movie Cast запит інформації про акторський склад для сторінки кінофільму.\nexport const fetchMovieCast = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/credits?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.cast;\n}\n\n// Movie Reviews запит оглядів для сторінки кінофільму.\nexport const fetchMovieReviews = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/reviews?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\nconst api = {\n    fetchMoviesTrending,\n    fetchMovieSearch,\n    fetchMovieInfo,\n    fetchMovieCast,\n    fetchMovieReviews,\n}\n\nexport default api;"],"names":["TrendMovieLink","styled","Link","movies","location","useLocation","map","id","title","name","to","state","from","SearchForm","SearchButton","SearchInput","useState","query","setQuery","setMovies","useSearchParams","searchParams","setSearchParams","isError","setIsError","isLoading","setIsLoading","searchQuery","get","useEffect","getMovies","api","data","message","onSubmit","event","preventDefault","trim","target","reset","toast","autoClose","type","size","autocomplete","autoFocus","value","onChange","placeholder","Loader","MovieList","moviesAPI","axios","baseURL","API_KEY","fetchMoviesTrending","params","api_key","response","results","fetchMovieSearch","fetchMovieInfo","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}