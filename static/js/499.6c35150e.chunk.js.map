{"version":3,"file":"static/js/499.6c35150e.chunk.js","mappings":"4PAEaA,EAAOC,EAAAA,GAAAA,GAAH,gFAMJC,EAAOD,EAAAA,GAAAA,GAAH,8JAQJE,EAASF,EAAAA,GAAAA,GAAH,yEAKNG,EAAUH,EAAAA,GAAAA,EAAH,iDAIPI,EAAeJ,EAAAA,GAAAA,EAAH,iD,iDCwBzB,EA1CgB,WACZ,OAA8BK,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBCE,EAAAA,EAAAA,YAAU,WACPL,GAAa,GAEb,IAAMM,EAAY,mCAAG,6GAEMC,EAAAA,GAAAA,kBAAsBJ,GAF5B,OAEPK,EAFO,OAGbV,EAAWU,GAHE,gDAKbN,EAAS,KAAMO,SALF,yBAQbT,GAAa,GARA,4EAAH,qDAWlBM,GACH,GAAE,CAACH,KAGA,gCACKJ,IAAa,SAACW,EAAA,EAAD,IACbT,IAAS,oCACW,KAAb,OAAPJ,QAAO,IAAPA,OAAA,EAAAA,EAASc,UAAgB,SAAChB,EAAD,wDACzBE,IACG,SAACP,EAAD,UACKO,EAAQe,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACT,UAACvB,EAAD,YACI,UAACC,EAAD,sBAAiBqB,MACjB,SAAC,EAAD,UAAUC,MAFHF,EADF,QAUhC,C,wDC7CKG,E,QAAYC,EAAAA,OAAa,CAC3BC,QAAS,iCAGPC,EAAU,mCAIHC,EAAmB,mCAAG,oGACRJ,EAAUK,IAAI,uBAAwB,CACzDC,OAAQ,CACJC,QAASJ,KAHc,cACzBK,EADyB,yBAOxBA,EAAShB,KAAKiB,SAPU,2CAAH,qDAWnBC,EAAgB,mCAAG,WAAOC,GAAP,uFACLX,EAAUK,IAAI,iBAAkB,CACnDC,OAAQ,CACJC,QAASJ,EACTS,MAAOD,KAJa,cACtBH,EADsB,yBAQrBA,EAAShB,KAAKiB,SARO,2CAAH,sDAYhBI,EAAc,mCAAG,WAAOhB,GAAP,uFACHG,EAAUK,IAAV,iBAAwBR,EAAxB,KAA+B,CAClDS,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAAShB,MAPU,2CAAH,sDAWdsB,EAAc,mCAAG,WAAOjB,GAAP,uFACHG,EAAUK,IAAV,iBAAwBR,EAAxB,aAAuC,CAC1DS,OAAQ,CACJC,QAASJ,KAHS,cACpBK,EADoB,yBAOnBA,EAAShB,KAAKuB,MAPK,2CAAH,sDAWdC,EAAiB,mCAAG,WAAOnB,GAAP,uFACNG,EAAUK,IAAV,iBAAwBR,EAAxB,aAAuC,CAC1DS,OAAQ,CACJC,QAASJ,KAHY,cACvBK,EADuB,yBAOtBA,EAAShB,KAAKiB,SAPQ,2CAAH,sDAUxBlB,EAAM,CACRa,oBAAAA,EACAM,iBAAAA,EACAG,eAAAA,EACAC,eAAAA,EACAE,kBAAAA,GAGJ,M","sources":["pages/Reviews/Reviews.styled.jsx","pages/Reviews/Reviews.jsx","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n    list-style: none;\n    margin: 0;\n    padding: 0;\n`;\n\nexport const Item = styled.li`\n    &:not(:last-child) {\n        padding-bottom: 8px;\n        margin-bottom: 16px;\n        border-bottom: 1px solid black;\n    }\n`;\n\nexport const Author = styled.h4`\n    margin-left: 24px;\n    margin-bottom: 8px;\n`;\n\nexport const Сontent = styled.p`\n    margin-bottom: 8px;\n`;\n\nexport const NotFoundText = styled.p`\n    text-align: center;\n`;","import { NotFoundText, List, Item, Author, Сontent} from './Reviews.styled';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from \"../../components/Loader/Loader\";\nimport api from '../../services/api';\n\n\nconst Reviews = () => {\n    const [reviews, setReviews] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n    const { movieId } = useParams();\n\n     useEffect(() => {\n        setIsLoading(true);\n\n        const movieReviews = async () => {\n            try {\n                const data = await api.fetchMovieReviews(movieId);\n                setReviews(data);\n            } catch (error) {\n                setError(error.message);\n            }\n            finally{\n                setIsLoading(false)\n            }\n        };\n        movieReviews();\n    }, [movieId]);\n    \n    return (\n        <>\n            {isLoading && <Loader />}\n            {error && <p>ERROR!!!</p>}\n            {reviews?.length === 0 && <NotFoundText>We don't have any reviews for this movie.</NotFoundText>}\n            {reviews &&\n                <List>\n                    {reviews.map(({ id, author, content }) => (\n                        <Item key={id}>\n                            <Author>Author: {author}</Author>\n                            <Сontent>{content}</Сontent>\n                        </Item>\n                    ))}\n                </List>\n            }\n        </>\n    )\n}\n\nexport default Reviews;","import axios from 'axios';\n\nconst moviesAPI = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nconst API_KEY = '19de3f69b689775c27a0f6800fa7a97e';\n\n\n// movies trending  список найпопулярніших фільмів на сьогодні для створення колекції на головній сторінці.\nexport const fetchMoviesTrending = async () => {\n    const response = await moviesAPI.get('/trending/movie/day?', {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\n// movie search пошук фільму за ключовим словом на сторінці фільмів.\nexport const fetchMovieSearch = async (searchQuery) => {\n    const response = await moviesAPI.get('/search/movie?', {\n        params: {\n            api_key: API_KEY,\n            query: searchQuery,\n        },\n    });\n\n    return response.data.results;\n}\n\n// movie info запит повної інформації про фільм для сторінки кінофільму.\nexport const fetchMovieInfo = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data;\n}\n\n//  Movie Cast запит інформації про акторський склад для сторінки кінофільму.\nexport const fetchMovieCast = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/credits?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.cast;\n}\n\n// Movie Reviews запит оглядів для сторінки кінофільму.\nexport const fetchMovieReviews = async (id) => {\n    const response = await moviesAPI.get(`/movie/${id}/reviews?`, {\n        params: {\n            api_key: API_KEY,\n        },\n    });\n\n    return response.data.results;\n}\n\nconst api = {\n    fetchMoviesTrending,\n    fetchMovieSearch,\n    fetchMovieInfo,\n    fetchMovieCast,\n    fetchMovieReviews,\n}\n\nexport default api;"],"names":["List","styled","Item","Author","Сontent","NotFoundText","useState","reviews","setReviews","isLoading","setIsLoading","error","setError","movieId","useParams","useEffect","movieReviews","api","data","message","Loader","length","map","id","author","content","moviesAPI","axios","baseURL","API_KEY","fetchMoviesTrending","get","params","api_key","response","results","fetchMovieSearch","searchQuery","query","fetchMovieInfo","fetchMovieCast","cast","fetchMovieReviews"],"sourceRoot":""}